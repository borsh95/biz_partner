@use "sass:list";
@use "sass:string";

@mixin defineColorHSL($name, $color, $n: 1) {
	@if length($color) >= $n {
		$color: list.nth($color, $n);

		@if not string.index(#{$color}, "var(--") {
			$hue: #{hue($color)};
			$saturation: #{saturation($color)};
			$lightness: #{lightness($color)};
			$alpha: #{alpha($color)};

			--color-#{$name}-hsl: #{unquote("#{$hue}, #{$saturation}, #{$lightness}")};

			@if ($alpha == "1") {
				--color-#{$name}: hsl(var(--color-#{$name}-hsl));
			} @else {
				--color-#{$name}: hsla(var(--color-#{$name}-hsl), #{$alpha});
			}
		} @else {
			--color-#{$name}: #{$color};
		}
	}
}


@mixin generate–°olorSheme($colors) {
	:root, [data-theme="default"] {		
		@each $name, $color in $colors {
			@include defineColorHSL($name, $color);
		}
	}

	.theme-dark, [data-theme="dark"] {
		@each $name, $color in $colors {
			@include defineColorHSL($name, $color, 2);
		}
	}
}